#!/usr/bin/env python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: docker_facts
version_added: "beta"
short_description: get docker facts
description:
    - get docker related dockers
options:
  filter:
    description:
      - set type of infomation, values are all,images,image,containers,container,top,logs,info,version
    required: False
    default: all
    aliases: []
  name:
    description:
      - Set name of image or container
    required: False
    default: None
    aliases: []
author: Xiangjun Zhang
requirements: [ "docker-py >= 0.3.0", "docker >= 0.10.0" ]
'''

EXAMPLES = '''
get infomation of container named example

- hosts: docker_host
  tasks:
  docker_facts: filter=container name=example
'''
 
HAS_DOCKER_PY = True

from urlparse import urlparse
import re
try:
    import docker.client
    import docker.utils
    from requests.exceptions import *
    try:
        from docker.errors import APIError as DockerAPIError
    except ImportError:
        from docker.client import APIError as DockerAPIError 
except ImportError, e:
    HAS_DOCKER_PY = False

class DockerFacter:
    def __init__(self, module):
        self.module = module
        self.name = self.module.params.get('name')
        # connect to docker server
        self.docker_url = urlparse(self.module.params.get('docker_url'))
        self.client = docker.Client(base_url=self.docker_url.geturl())

    def info(self):
        return self.client.info()

    def version(self):
        return self.client.version()

    def image_list(self):
        results = self.client.images()
        if self.name:
            return [ i for i in results
                if re.match(r'%s'%self.name, i['RepoTags'][0], flags=re.IGNORECASE)]
        else:
            return results

    def image_id(self):
        image = self.image_list()
        if image:
            return image[0]['Id']
        else:
            raise Exception('image not found')

    def image_inspect(self):
        return self.client.inspect_image(self.image_id())

    def image_history(self):
        return self.client.history(self.name)

    def container_list(self):
        results = self.client.containers()
        if self.name:
            return [ i for i in results
                if re.match(r'%s'%self.name,
                    i['Names'][0].lstrip('/'), flags=re.IGNORECASE)]
        else:
            return results

    def container_id(self):
        container = self.container_list()
        if container:
            return container[0]['Id']
        else:
            raise Exception('container not found')

    def container_inspect(self):
        return self.client.inspect_container(self.container_id())

    def container_top(self):
        return self.client.top(self.container_id())

    def container_logs(self):
        return self.client.logs(self.container_id())

    def all_type(self):
        return {
            'info': self.info(),
            'image_list': self.image_list(),
            'container_list': self.container_list(),
            'version': self.version()
        }

def main():
    module = AnsibleModule(
        argument_spec = dict(
            docker_url = dict(default='unix://var/run/docker.sock'),
            filter = dict(default=all), 
            name = dict(default=None),
        )
    )

    try:
        facter = DockerFacter(module)
        filter = module.params.get('filter')

        if not HAS_DOCKER_PY:
            raise Exception('docker module not found')

        if filter == 'images':
            facts = facter.image_list()
        elif filter == 'image':
            facts = facter.image_inspect()
        elif filter == 'history':
            facts = facter.image_history()
        elif filter == 'containers':
            facts = facter.container_list()
        elif filter == 'container':
            facts = facter.container_inspect()
        elif filter == 'top':
            facts = facter.container_top()
        elif filter == 'logs':
            facts = facter.container_logs()
        elif filter == 'info':
            facts = facter.info()
        elif filter == 'version':
            facts = facter.version()
        else:
            facts = facter.all_type()
        module.exit_json(changed=False, docker_facts=facts)

    except Exception, e:
        module.fail_json(changed=False, msg=repr(e))

# import module snippets
from ansible.module_utils.basic import *
main()
